return {
	-- -- LSP Plugins
	-- {
	-- 	-- `lazydev` configures Lua LSP for your Neovim config, runtime and plugins
	-- 	-- used for completion, annotations and signatures of Neovim apis
	-- 	'folke/lazydev.nvim',
	-- 	ft = 'lua',
	-- 	opts = {
	-- 		library = {
	-- 			-- Load luvit types when the `vim.uv` word is found
	-- 			{ path = '${3rd}/luv/library', words = { 'vim%.uv' } },
	-- 		},
	-- 	},
	-- },
	-- {
	-- 	-- Main LSP Configuration
	-- 	'neovim/nvim-lspconfig',
	-- 	dependencies = {
	-- 		-- Automatically install LSPs and related tools to stdpath for Neovim
	-- 		-- Mason must be loaded before its dependents so we need to set it up here.
	-- 		-- NOTE: `opts = {}` is the same as calling `require('mason').setup({})`
	-- 		{ 'williamboman/mason.nvim', opts = {} },
	-- 		'williamboman/mason-lspconfig.nvim',
	-- 		'WhoIsSethDaniel/mason-tool-installer.nvim',
	--
	-- 		-- Useful status updates for LSP.
	-- 		{ 'j-hui/fidget.nvim', opts = {} },
	--
	-- 		-- Allows extra capabilities provided by nvim-cmp
	-- 		'hrsh7th/cmp-nvim-lsp',
	-- 	},
	-- 	config = function()
	-- 		vim.api.nvim_create_autocmd('LspAttach', {
	-- 			group = vim.api.nvim_create_augroup('kickstart-lsp-attach', { clear = true }),
	-- 			callback = function(event)
	-- 				local map = function(keys, func, desc, mode)
	-- 					mode = mode or 'n'
	-- 					vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = 'LSP: ' .. desc })
	-- 				end
	--
	-- 				-- map('gd', require('telescope.builtin').lsp_definitions, 'Goto Definition')
	-- 				map('gr', require('telescope.builtin').lsp_references, 'Goto References')
	-- 				-- map('gI', require('telescope.builtin').lsp_implementations, 'Goto Implementation')
	-- 				-- map('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type Definition')
	-- 				-- map('<leader>ds', require('telescope.builtin').lsp_document_symbols, 'Document Symbols')
	-- 				-- map('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, 'Workspace Symbols')
	-- 				-- map('<leader>rn', vim.lsp.buf.rename, 'Rename')
	-- 				-- map('<leader>ca', vim.lsp.buf.code_action, 'Code Action', { 'n', 'x' })
	-- 				-- map('gD', vim.lsp.buf.declaration, 'Goto Declaration')
	--
	-- 				-- The following code creates a keymap to toggle inlay hints in your
	-- 				-- code, if the language server you are using supports them
	-- 				--
	-- 				-- This may be unwanted, since they displace some of your code
	-- 				if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
	-- 					map('<leader>th', function()
	-- 						vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
	-- 					end, 'Toggle Inlay Hints')
	-- 				end
	-- 			end,
	-- 		})
	--
	-- 		local capabilities = vim.lsp.protocol.make_client_capabilities()
	-- 		capabilities = vim.tbl_deep_extend('force', capabilities, require('cmp_nvim_lsp').default_capabilities())
	--
	-- 		local servers = {
	-- 			-- ts_ls = {},
	-- 			-- tailwindcss = {},
	-- 			-- html = {},
	-- 			-- cssls = {},
	-- 			clangd = {
	-- 				cmd = { "clangd" },
	-- 				filetypes = { "c", "cpp", "objc", "objcpp" },
	-- 				root_dir = require('lspconfig.util').root_pattern("compile_commands.json", ".clangd", ".git"),
	-- 			},
	-- 			lua_ls = {
	-- 				settings = {
	-- 					Lua = {
	-- 						completion = {
	-- 							callSnippet = 'Replace',
	-- 						},
	-- 						-- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
	-- 						diagnostics = { disable = { 'missing-fields' } },
	-- 					},
	-- 				},
	-- 			},
	-- 		}
	--
	-- 		-- You can add other tools here that you want Mason to install
	-- 		-- for you, so that they are available from within Neovim.
	-- 		local ensure_installed = vim.tbl_keys(servers or {})
	-- 		vim.list_extend(ensure_installed, {
	-- 			'stylua', -- Used to format Lua code
	-- 		})
	-- 		require('mason-tool-installer').setup { ensure_installed = ensure_installed }
	--
	-- 		require('mason-lspconfig').setup {
	-- 			handlers = {
	-- 				function(server_name)
	-- 					local server = servers[server_name] or {}
	-- 					-- This handles overriding only values explicitly passed
	-- 					-- by the server configuration above. Useful when disabling
	-- 					-- certain features of an LSP (for example, turning off formatting for ts_ls)
	-- 					server.capabilities = vim.tbl_deep_extend('force', {}, capabilities, server.capabilities or {})
	-- 					require('lspconfig')[server_name].setup(server)
	-- 				end,
	-- 			},
	-- 		}
	-- 	end,
	-- },
}
